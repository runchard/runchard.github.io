(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{rAj8:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return c})),a.d(t,"default",(function(){return i}));a("rGqo"),a("yt8O"),a("Btvt"),a("RW0V"),a("91GP"),a("q1tI");var n=a("7ljp"),s=a("7xGc");var c={},b={_frontmatter:c},o=s.a;function i(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,s={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,["components"]);return Object(n.b)(o,Object.assign({},b,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",null,"TL;DR"),Object(n.b)("p",null,"Always Use ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"- (void)XCA_notify:(XCTAsyncTestCaseStatus)status withDelay:(NSTimeInterval)delay")," in async test."),Object(n.b)("h1",null,"Do async."),Object(n.b)("p",null,"Most opeartion can be an async behavior in objective C.\nSo, you code become js-ed."),Object(n.b)("div",{className:"gatsby-highlight","data-language":"text"},Object(n.b)("pre",Object.assign({parentName:"div"},{style:{counterReset:"linenumber NaN"},className:"language-text line-numbers"}),Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-text"}),"dispatch_async(dispatch_get_global_queue(<#dispatch_queue_priority_t priority#>, <#unsigned long flags#>), ^(void) {\n// bluhbluh codes\n  dispatch_async(dispatch_get_main_queue(), ^(void) {\n  // come back codes\n  });\n});"),Object(n.b)("span",Object.assign({parentName:"pre"},{"aria-hidden":"true",className:"line-numbers-rows",style:{whiteSpace:"normal",width:"auto",left:"0"}}),Object(n.b)("span",{parentName:"span"}),Object(n.b)("span",{parentName:"span"}),Object(n.b)("span",{parentName:"span"}),Object(n.b)("span",{parentName:"span"}),Object(n.b)("span",{parentName:"span"}),Object(n.b)("span",{parentName:"span"})))),Object(n.b)("p",null,Object(n.b)("em",{parentName:"p"},"From Objective C's block I got Why js is called the C's next generation."),"\nAnd, you want to write test?\nWelcome to ",Object(n.b)("em",{parentName:"p"},"pandora"),"."),Object(n.b)("h1",null,"Some operation is too fast to async."),Object(n.b)("p",null,"For better consistency reason, I use  XCAsyncTestCase\nto do async tests, insert ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"[self XCA_notify:XCTAsyncTestCaseStatusSucceeded];"),"\nand wait in the end of the test ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"[self XCA_waitForStatus:XCTAsyncTestCaseStatusSucceeded timeout:1];"),"\n",Object(n.b)("strong",{parentName:"p"},"BUT"),", if you run test like this:"),Object(n.b)("div",{className:"gatsby-highlight","data-language":"objectivec"},Object(n.b)("pre",Object.assign({parentName:"div"},{style:{counterReset:"linenumber NaN"},className:"language-objectivec line-numbers"}),Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-objectivec"}),Object(n.b)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-")," ",Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"void"),Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),"testAsyncWhatWhat ",Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"self")," XCA_notify",Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":"),"XCTAsyncTestCaseStatusSucceeded",Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.b)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"self")," XCA_waitForStatus",Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":"),"XCTAsyncTestCaseStatusSucceeded timeout",Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),":"),Object(n.b)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")),Object(n.b)("span",Object.assign({parentName:"pre"},{"aria-hidden":"true",className:"line-numbers-rows",style:{whiteSpace:"normal",width:"auto",left:"0"}}),Object(n.b)("span",{parentName:"span"}),Object(n.b)("span",{parentName:"span"}),Object(n.b)("span",{parentName:"span"}),Object(n.b)("span",{parentName:"span"})))),Object(n.b)("p",null,"Timeout Exception!"),Object(n.b)("p",null,"use the following instead:"),Object(n.b)("div",{className:"gatsby-highlight","data-language":"text"},Object(n.b)("pre",Object.assign({parentName:"div"},{style:{counterReset:"linenumber NaN"},className:"language-text line-numbers"}),Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-text"}),"- (void)testAsyncWhatWhat\n{\n  [self XCA_notify:XCTAsyncTestCaseStatusSucceeded withDelay:0.01];\n  [self XCA_waitForStatus:XCTAsyncTestCaseStatusSucceeded timeout:1];\n}"),Object(n.b)("span",Object.assign({parentName:"pre"},{"aria-hidden":"true",className:"line-numbers-rows",style:{whiteSpace:"normal",width:"auto",left:"0"}}),Object(n.b)("span",{parentName:"span"}),Object(n.b)("span",{parentName:"span"}),Object(n.b)("span",{parentName:"span"}),Object(n.b)("span",{parentName:"span"}),Object(n.b)("span",{parentName:"span"})))),Object(n.b)("p",null,"Because this operation is so fast.\nFor an illustration, if you fetch something from core data, Its will raise an exception. Your code don't raise? Good, you got a heinsensbug."),Object(n.b)("h1",null,"Internal of ",Object(n.b)("code",Object.assign({parentName:"h1"},{className:"language-text"}),"AsyncTestCase")),Object(n.b)("p",null,Object(n.b)("em",{parentName:"p"},"XCA")," set two property to check async status"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"_notified"),"\nIt will set ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"_notified")," to ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"no")," at first when call ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"XCA_waitForStatus:timeout:"),".\nSet ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"_notified")," to ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"no")," means to initialize the next async test. It helps to test async status multiple times.\nif ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"XCA_notify:")," called before ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"XCAwaitForStatus:timeout:"),", Then ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"XCAwaitForStatus:timeout:")," will initialize at wrong time, and can't detect async."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"_expectedStatus"))),Object(n.b)("h1",null,"Concurrency bug is always about time!"))}i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---posts-posts-2014-07-24-always-objective-c-asynchronous-operation-more-async-when-in-async-test-markdown-f6e9c9627f2aad3d4468.js.map