{"version":3,"sources":["webpack:///./posts/posts/2014-07-24-always-objective-c-asynchronous-operation-more-async-when-in-async-test.markdown"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---posts-posts-2014-07-24-always-objective-c-asynchronous-operation-more-async-when-in-async-test-markdown-f6e9c9627f2aad3d4468.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/cccc-im/cccc-im/src/components/posts-layout.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`TL;DR`}</h1>\n    <p>{`Always Use `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`- (void)XCA_notify:(XCTAsyncTestCaseStatus)status withDelay:(NSTimeInterval)delay`}</code>{` in async test.`}</p>\n    <h1>{`Do async.`}</h1>\n    <p>{`Most opeartion can be an async behavior in objective C.\nSo, you code become js-ed.`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-text line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`dispatch_async(dispatch_get_global_queue(<#dispatch_queue_priority_t priority#>, <#unsigned long flags#>), ^(void) {\n// bluhbluh codes\n  dispatch_async(dispatch_get_main_queue(), ^(void) {\n  // come back codes\n  });\n});`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <p><em parentName=\"p\">{`From Objective C's block I got Why js is called the C's next generation.`}</em>{`\nAnd, you want to write test?\nWelcome to `}<em parentName=\"p\">{`pandora`}</em>{`.`}</p>\n    <h1>{`Some operation is too fast to async.`}</h1>\n    <p>{`For better consistency reason, I use  XCAsyncTestCase\nto do async tests, insert `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[self XCA_notify:XCTAsyncTestCaseStatusSucceeded];`}</code>{`\nand wait in the end of the test `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[self XCA_waitForStatus:XCTAsyncTestCaseStatusSucceeded timeout:1];`}</code>{`\n`}<strong parentName=\"p\">{`BUT`}</strong>{`, if you run test like this:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"objectivec\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-objectivec line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-objectivec\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`-`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`void`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`testAsyncWhatWhat `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`[`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`self`}</span>{` XCA_notify`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{`XCTAsyncTestCaseStatusSucceeded`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`]`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`[`}</span><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`self`}</span>{` XCA_waitForStatus`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{`XCTAsyncTestCaseStatusSucceeded timeout`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span><span parentName=\"code\" {...{\n            \"className\": \"token number\"\n          }}>{`1`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`]`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span></code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <p>{`Timeout Exception!`}</p>\n    <p>{`use the following instead:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-text line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`- (void)testAsyncWhatWhat\n{\n  [self XCA_notify:XCTAsyncTestCaseStatusSucceeded withDelay:0.01];\n  [self XCA_waitForStatus:XCTAsyncTestCaseStatusSucceeded timeout:1];\n}`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span><span parentName=\"span\"></span></span></pre></div>\n    <p>{`Because this operation is so fast.\nFor an illustration, if you fetch something from core data, Its will raise an exception. Your code don't raise? Good, you got a heinsensbug.`}</p>\n    <h1>{`Internal of `}<code parentName=\"h1\" {...{\n        \"className\": \"language-text\"\n      }}>{`AsyncTestCase`}</code></h1>\n    <p><em parentName=\"p\">{`XCA`}</em>{` set two property to check async status`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`_notified`}</code>{`\nIt will set `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`_notified`}</code>{` to `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`no`}</code>{` at first when call `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`XCA_waitForStatus:timeout:`}</code>{`.\nSet `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`_notified`}</code>{` to `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`no`}</code>{` means to initialize the next async test. It helps to test async status multiple times.\nif `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`XCA_notify:`}</code>{` called before `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`XCAwaitForStatus:timeout:`}</code>{`, Then `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`XCAwaitForStatus:timeout:`}</code>{` will initialize at wrong time, and can't detect async.`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`_expectedStatus`}</code></li>\n    </ul>\n    <h1>{`Concurrency bug is always about time!`}</h1>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}