{"componentChunkName":"component---src-components-posts-page-layout-jsx","path":"/posts/archived/2014-12-04-python3-yield-from-skills-up/","result":{"data":{"mdx":{"id":"c0c281a6-c1a3-5859-af21-bad69f457d87","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"date\": \"2014-12-04T04:09:00.000Z\",\n  \"tags\": [\"python\", \"coroutine\"],\n  \"title\": \"python3 yield from skills up\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"python3 yield from skills up\", mdx(\"a\", {\n    id: \"sec-1\"\n  })), mdx(\"p\", null, \"The explanation that yield from g is equivalent to for v in g: yield v does not even begin to do justice to what yield from is all about. Because, let's face it, if all yield from does is expand the for loop, then it does not warrant adding yield from to the language and preclude a whole bunch of new features from being implemented in Python 2.x.\\nThink of yield from as providing a transparent two-way channel from the caller to the sub-generator.\"), mdx(\"h2\", null, \"sending data to a generator using yield from\", mdx(\"a\", {\n    id: \"sec-1-1\"\n  })), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-text line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"def generator():\\n    \\\"\\\"\\\"\\n    A generator(coroutine) that writes data *sent* to it to fd, socket, etc.\\n    \\\"\\\"\\\"\\n    while True:\\n        w = (yield)\\n        print('>> %s' % w)\\n\\n\\ndef gen_wrapper(c):          # c for coroutine\\n    yield from c\\n\\nif __name__ == '__main__':\\n    gen = generator()\\n    wrap = gen_wrapper(gen)\\n    wrap.send(None)  # initialize the coroutine\\n    for i in range(4):\\n        gen.send(i)\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"h2\", null, \"exception handling for yield from\", mdx(\"a\", {\n    id: \"sec-1-2\"\n  })), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-text line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"class TransactionException(Exception):\\n    pass\\n\\n\\ndef generator():\\n    while True:\\n        try:\\n            w = (yield)\\n        except TransactionException:\\n            print('******')\\n        else:\\n            print('>> ', w)\\n\\n\\ndef gen_wrapper(c):          # c for coroutine\\n    yield from c\\n\\n\\nif __name__ == '__main__':\\n    gen = generator()\\n    wrap = gen_wrapper(gen)\\n    wrap.send(None)\\n    for i in [0, 1, 2, 3, 'exc', 4]:\\n        if i == 'exc':\\n            wrap.throw(TransactionException)\\n        else:\\n            wrap.send(i)\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"h2\", null, \"close outside of block\", mdx(\"a\", {\n    id: \"sec-1-3\"\n  })), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-text line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"def generator():\\n    while True:\\n        w = (yield)\\n        print('>> ', w)\\n\\n\\ndef gen_wrapper(c):          # c for coroutine\\n    yield from c\\n\\n\\nif __name__ == '__main__':\\n    gen = generator()\\n    wrap = gen_wrapper(gen)\\n    wrap.send(None)\\n    for i in [0, 1, 2, 3, 'close', 4]:\\n        if i == 'close':\\n            wrap.close()\\n        else:\\n            wrap.send(i)\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"h2\", null, \"benefits of yield\", mdx(\"a\", {\n    id: \"sec-1-4\"\n  })), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using a generalization of the StopIteration exception makes it easy for other kinds of iterators to participate in the protocol without having to grow an extra attribute or a close() method.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It simplifies the implementation, because the point at which the return value from the subgenerator becomes available is the same point at which the exception is raised. Delaying until any later time would require storing the return value somewhere.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the primary benefits of yield from come when you've written a generator that uses these techniques and when it needs to be refactored.\")), mdx(\"p\", null, \"and especially this part: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.python.org/dev/peps/pep-0380/#generators-as-threads\"\n  }), \"https://www.python.org/dev/peps/pep-0380/#generators-as-threads\")), mdx(\"h2\", null, mdx(\"code\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"coroutine\"), \" is not a \", mdx(\"code\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"callback\"), \" (which is \", mdx(\"code\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"yield\"), \" is not a \", mdx(\"code\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"function\"), \")\", mdx(\"a\", {\n    id: \"sec-1-5\"\n  })), mdx(\"p\", null, \"The difference is that whenever the generator \\\"yields\\\" a value the execution of the generator is paused and the code continues where the generator was called.\"), mdx(\"h1\", null, \"reference\", mdx(\"a\", {\n    id: \"sec-2\"\n  })), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://legacy.python.org/dev/peps/pep-0380/\"\n  }), \"http://legacy.python.org/dev/peps/pep-0380/\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://legacy.python.org/dev/peps/pep-0342/\"\n  }), \"http://legacy.python.org/dev/peps/pep-0342/\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://stackoverflows.com\"\n  }), \"http://stackoverflows.com\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"speacial great thanks to \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"about.me/fantix\"\n  }), \"@Fantix King\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"python3 yield from skills up","date":"2014-12-04T04:09:00.000Z"}}},"pageContext":{"id":"c0c281a6-c1a3-5859-af21-bad69f457d87","next":{"id":"ef1a6910-8512-57b2-95ff-8738b8113dd9","frontmatter":{"title":"Link post","date":"2014-11-12T04:04:33.000Z"},"fields":{"slug":"/posts/archived/2014-11-12-link-post/"}},"previous":{"id":"b0490050-f720-58b4-8ef7-fdf4ca028c64","frontmatter":{"title":"Pro Evernote","date":"2015-09-07T10:12:08.000Z"},"fields":{"slug":"/posts/archived/2015-09-07-pro-evernote/"}}}}}