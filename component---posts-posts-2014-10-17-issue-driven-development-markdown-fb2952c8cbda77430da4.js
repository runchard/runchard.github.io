(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{W5eX:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return c})),a.d(t,"default",(function(){return r}));a("rGqo"),a("yt8O"),a("Btvt"),a("RW0V"),a("91GP"),a("q1tI");var n=a("7ljp"),b=a("7xGc");var c={},s={_frontmatter:c},l=b.a;function r(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,b={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(b[a]=e[a]);return b}(e,["components"]);return Object(n.b)(l,Object.assign({},s,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",null,"ISSUE"),Object(n.b)("p",null,"这个是最重要的地方\nissue主要包含什么.\n尽可能不从host floor上面删除东西, 如果是逻辑改变, 那么要使用",Object(n.b)("del",{parentName:"p"},"!!")," 中划线语法进行删除, 这样可以让人一目了然.\n",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"typo fix")," 或者 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"text decoration"),", 才可以直接修改."),Object(n.b)("h2",null,"kanban"),Object(n.b)("p",null,"用了github很久发现其实github issue可以帮助我们解决很多问题，但是也会带来很多问题，比如其中一个就很重要。我们如何确定开发进展, 并不是每一次我们都能很清晰的在大脑进行一次拓扑排序的.\n那么这时候我们就需要借助kanban工具, 上面我有提到kanban这种东西我是推荐使用trello, 功能少, 刚刚好.\n其实只要多一个工具就等于加大了一次复杂程度, 所以需要从流程上去简化他, 那么这时候就很简单了,\n流程是这样: 由 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"PM")," 建立kanban, 然后由 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"repo leader")," 确定 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"dev"),", ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"dev")," 开发完毕后由 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"repo leader")," 来merge ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"pull request"),", 最后由 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"QA")," 将kanban移动到 完成栏."),Object(n.b)("h3",null,"所以我们的整个业务逻辑按照抽象等级就分成了三层"),Object(n.b)("table",{border:"2",cellSpacing:"0",cellPadding:"6",rules:"groups",frame:"hsides"},Object(n.b)("colgroup",null,Object(n.b)("col",{className:"left"})),Object(n.b)("thead",null,Object(n.b)("tr",null,Object(n.b)("th",{scope:"col",className:"left"},"level"))),Object(n.b)("tbody",null,Object(n.b)("tr",null,Object(n.b)("td",{className:"left"},"kanban")),Object(n.b)("tr",null,Object(n.b)("td",{className:"left"},"issue")),Object(n.b)("tr",null,Object(n.b)("td",{className:"left"},"code commits")))),Object(n.b)("h2",null,"details"),Object(n.b)("h3",null,Object(n.b)("code",Object.assign({parentName:"h3"},{className:"language-text"}),"commit")," your code"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"小步提交，并且尽可能的在任何commit中refer相关的 ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"issue"),", 在有所改变的时候尽可能的comment in issue."),Object(n.b)("li",{parentName:"ol"},"如果 ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"commit")," 超过3次，还没有refer任何issue，那么这时候你就要小心了。很可能你做的已经开始超出控制了."),Object(n.b)("li",{parentName:"ol"},"commit要按逻辑提交, 并在log里面解释容易混淆的逻辑.")),Object(n.b)("h2",null,"Big Changes"),Object(n.b)("p",null,"当遇到项目级别的大型重构时候, 则需要进行1-2天的调整, 那么这时候就需要 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"repo leader")," 提前一周确定好改变方案, 然后选定一天进行 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"refacotr"),". 而 =dev=们则需要做好准备进行修修补补了."),Object(n.b)("h2",null,"benefits"),Object(n.b)("h3",null,"code is document, issue is the structure."),Object(n.b)("p",null,"我们都经历过太多只有代码, 没有文档的痛苦. 就好比扔给你你一大堆线团, 然后告诉你这其实是一个毛衣, 你不能搞乱其他花纹的基础上, 再织一个花纹上去.\n很幸运的是, 如果你严格采用IDD的话, 那么doc一般对于新手而言并不是什么困难的问题, 一个新程序员从 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"kanban")," 开始就有一个大体的开发过程, 然后对应到issue里面, 很容易就可以把握清楚功能点和细节."),Object(n.b)("h3",null,"overview"),Object(n.b)("p",null,"程序员比较容易失去大局观, 而产品经理很难控制开发的进度, 那么kanban和issue结合就很容易估计项目的复杂程度, 软件复杂程度估计本来就是一个比较复杂和困难的任务.\n这时候就需要 ",Object(n.b)("strong",{parentName:"p"},"repo leader")," 去估计项目和issue的粒度了."),Object(n.b)("h2",null,"keep host floor up-to-date."),Object(n.b)("p",null,"可能突然会有一个更好的主意, 突然发现昨天的功夫都白费了. ok! 很好, 这太正常不过了, 我们并不能保证我们每天都按照正确的方向走, ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"PM")," 不能, ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"BD")," 不能, 更不要提对着机器的 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"dev")," 了.\n对, 那么一定要comment 在下面, 然后 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"repo floor")," 一定要保持是最新并且最好就是一眼就能看出来想做什么, 做了什么."),Object(n.b)("h2",null,"overview"),Object(n.b)("h1",null,"从开发的角度来看:"),Object(n.b)("p",null,Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"issue")," 大概可以分成三类："),Object(n.b)("h3",null,"enhancement"),Object(n.b)("p",null,"这个种类比较多。\n比如不那么显式的feature，或者是一个暴露bug的测试, 或者是refactor。这都算是enhancement流程比较类似，但是不太一样。\n如果开发发现一个好的enhancement, 如果比较小, 那么可以直接顺手提交一个commit 并且在log中表明是enhancement.\n如果开发发现一个比较大的enhancement, 那么需要打开一个issue, 由=repo leader=去决定排期和开发计划."),Object(n.b)("h3",null,"bug"),Object(n.b)("p",null,"比较规范的流程是：\n1.  首先用户或者PM发现了一个bug，推送给相关PM\n2.  PM确认bug后，按照bug issue规范，发起一个 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"kanban"),". 然后 ",Object(n.b)("strong",{parentName:"p"},"repo leader")," ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"issue")," with ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"bug")," tag ， ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"assign")," 给 ",Object(n.b)("strong",{parentName:"p"},"repo leader"),"\n3.  ",Object(n.b)("strong",{parentName:"p"},"repo leader")," 确认并comment描述细节, update issue host floor assign to ",Object(n.b)("strong",{parentName:"p"},"dev"),".\n4.  ",Object(n.b)("strong",{parentName:"p"},"dev")," 分析具体细节并建立todo或者拆分issue, 描述开发思路和过程. 即时comment, 并即时refer issue."),Object(n.b)("h3",null,"feature"),Object(n.b)("p",null,"比较规范的流程是：\n1.  首先PM酝酿并在kanban提出需求，跟 ",Object(n.b)("strong",{parentName:"p"},"repo leader")," 讨论.\n2.  由 ",Object(n.b)("strong",{parentName:"p"},"repo leader")," 发起 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"issue")," with ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"feature")," tag 并关联到 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"kanban")," 上面.\n3.  ",Object(n.b)("strong",{parentName:"p"},"dev")," 分析具体细节并建立todo或者拆分issue, 描述开发思路和过程. 即时comment, 并即时refer issue.\n4.  开发完毕后, ",Object(n.b)("strong",{parentName:"p"},"dev")," 发起 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"pull request"),".\n5.  ",Object(n.b)("strong",{parentName:"p"},"repo leader")," merge ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"pull request"),", 然后 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"assign")," 给 ",Object(n.b)("strong",{parentName:"p"},"QA"),"\n6.  ",Object(n.b)("strong",{parentName:"p"},"QA")," 确定没有问题后, 移动kanban到=完成=."))}r.isMDXComponent=!0}}]);
//# sourceMappingURL=component---posts-posts-2014-10-17-issue-driven-development-markdown-fb2952c8cbda77430da4.js.map