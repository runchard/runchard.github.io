(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{n4mw:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return c})),a.d(t,"default",(function(){return u}));a("rGqo"),a("yt8O"),a("Btvt"),a("RW0V"),a("91GP"),a("q1tI");var n=a("7ljp"),b=a("7xGc");var c={},l={_frontmatter:c},s=b.a;function u(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,b={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(b[a]=e[a]);return b}(e,["components"]);return Object(n.b)(s,Object.assign({},l,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"啊! 不知道什么时候看到一本书上面写的这么一个内容, 那就是 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x2o"),"."),Object(n.b)("h1",null,"what is X2O?"),Object(n.b)("p",null,Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"X2O")," 是一个很有趣的经验, 是指一个dev每天只准备两个 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"feature"),", 可能是两个大 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"feature"),", 也可能是两个小 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"feature"),", 最后进行一次 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"refactor"),"."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"x:")," for feature"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"o:")," for optimization.")),Object(n.b)("h1",null,"why ",Object(n.b)("code",Object.assign({parentName:"h1"},{className:"language-text"}),"X2O")),Object(n.b)("p",null,"那么使用 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"X2O")," 可以解决这两个问题."),Object(n.b)("h2",null,Object(n.b)("code",Object.assign({parentName:"h2"},{className:"language-text"}),"X2O")," 可以控制步调"),Object(n.b)("p",null,"在开发某一个feature的时候, 尤其是在开发新项目的时候, dev很难搞清楚那些方法应该共用, 那些API调用顺序究竟如何更完美.\n那么合理的分割粒度, 控制在每天两个=feature=有助于dev保持合理的节奏感.\n这种措施将会使得整个项目/某个模块保持紧凑, 并且方便下一次的更改."),Object(n.b)("h2",null,"多想, 少写"),Object(n.b)("p",null,"写代码是一个很耗费生产力的过程.\n有些人会想得太多, 很简单的一个任务抽象了n层, 最后花了许多倍的时间最终还是修改回来.\n保持两个feature有助于 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"dev")," 集中注意力在完成上面, 这样就不会想得太多, 以至于忘记了最终的目的是什么."),Object(n.b)("h2",null,"大局观"),Object(n.b)("p",null,"事实上 ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"dev")," 是一个很容易集中注意力去写代码, 但是在写代码时不断深度优先分散掉注意力, 一会就深入到忘记之前考虑的东西了. 只见树木, 不见丛林.\n那么如果保持x2o, 这样有助于保证程序员粒度化逻辑和代码."),Object(n.b)("h2",null,"先想, 再写"),Object(n.b)("p",null,"x2o使得一个=dev= 必须保证在一天完成两个feature, 粒度足够小, 使得抽象层保持在feature的论述阶段, 不会发生在实现阶段.\n并且依赖issue 去做内容, 更多的依赖仔细的思考而不是下手就写出一大片代码."),Object(n.b)("h2",null,"成就感"),Object(n.b)("p",null,"很少有项目可以说是2-3天就可以完成的, 一般都是1个月左右, 甚至1-2年, 那么如果没天写, 不停的写, 那么很快dev自己就已经迷失了.\n如果能够每天完成1-2个feature, 那么将会给工程师本身带来无与伦比的成就感."),Object(n.b)("h2",null,"更容易写测试"),Object(n.b)("p",null,"因为更具有逻辑并且很细致, 那么很容易在确定逻辑的前提下写出合理的测试. 使得代码更稳健"))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---posts-posts-2014-10-17-why-i-use-x-2-o-markdown-0da5cc070a84c6c807d6.js.map