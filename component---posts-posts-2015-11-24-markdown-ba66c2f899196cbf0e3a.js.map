{"version":3,"sources":["webpack:///./posts/posts/2015-11-24----.markdown"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,4BACA,qBAAG,kCAAMC,WAAW,KAAQ,CACxB,UAAa,kBADd,OAAH,YAGF,kCAAMA,WAAW,KAAQ,CACnB,UAAa,kBADnB,SAHE,KAK2B,kCAAMA,WAAW,KAAQ,CAChD,UAAa,kBADU,SAL3B,KAO2B,kCAAMA,WAAW,KAAQ,CAChD,UAAa,kBADU,UAP3B,KAS4B,kCAAMA,WAAW,KAAQ,CACjD,UAAa,kBADW,WAT5B,KAW6B,kCAAMA,WAAW,KAAQ,CAClD,UAAa,kBADY,UAX7B,KAa4B,kCAAMA,WAAW,KAAQ,CACjD,UAAa,kBADW,OAb5B,KAeyB,kCAAMA,WAAW,KAAQ,CAC9C,UAAa,kBADQ,SAfzB,KAiB2B,kCAAMA,WAAW,KAAQ,CAChD,UAAa,kBADU,SAjB3B,KAoBA,yEAAwD,sBAAQA,WAAW,KAAnB,MAAxD,qCAEA,uDAAsC,kCAAMA,WAAW,KAAQ,CAC3D,UAAa,kBADqB,cAAtC,wBAGA,kCAAMA,WAAW,KAAQ,CACrB,UAAa,kBADjB,cAHA,2BAKsD,kCAAMA,WAAW,KAAQ,CAC3E,UAAa,kBADqC,cALtD,cAQA,sFACA,4BAAW,kCAAMA,WAAW,KAAQ,CAChC,UAAa,kBADN,aAAX,mBAE6C,kCAAMA,WAAW,KAAQ,CAClE,UAAa,kBAD4B,cAF7C,QAImC,kCAAMA,WAAW,KAAQ,CACxD,UAAa,kBADkB,WAJnC,oBAM4C,sBAAQA,WAAW,KAAnB,QAN5C,KAOA,2EACA,0DACM,sBAAQA,WAAW,KAAnB,QADN,SAEA,2CACA,kBAAS,CACP,UAAa,mBACb,gBAAiB,QAChB,iCAAKA,WAAW,OAAU,CACzB,MAAS,CACP,aAAgB,kBAElB,UAAa,+BACZ,kCAAMA,WAAW,OAAU,CAC1B,UAAa,kBADd,iCAE0C,kCAAMA,WAAW,OAAU,CACpE,cAAe,OACf,UAAa,oBACb,MAAS,CACP,WAAc,SACd,MAAS,OACT,KAAQ,OAET,oBAAMA,WAAW,aAK5BJ,EAAWK,gBAAiB","file":"component---posts-posts-2015-11-24-markdown-ba66c2f899196cbf0e3a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/cccc-im/cccc-im/src/components/posts-layout.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`背景`}</h1>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ES6`}</code>{` 增加了关键字\n`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`class`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`const`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`export`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`extends`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`import`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`let`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`super`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`yield`}</code>{`.`}</p>\n    <p>{`增加更现代的函数式编程特点, 也引入了更OO的模式, 当然同时增大了语言复杂度. (但事实上降低了`}<strong parentName=\"p\">{`全栈`}</strong>{`的复杂度)\n可以明确感知到一股rust, scala风徐徐吹来.`}</p>\n    <p>{`最近则又学了一段时间的 Angular 2 和其官方所推崇的 `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`TypeScript`}</code>{`, 感觉内心真是崩溃沮丧无力吐槽.\n号称`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`typescript`}</code>{`是为了解决 Type 问题设计的. 然而他居然是`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`javascript`}</code>{`的superset.`}</p>\n    <p>{`M$真是创建奇妙符号和语法的好手. 自从给C++系统扩充CLI之后, 就可以明白哪怕语言在复杂, 我们依然可以让他更复杂.`}</p>\n    <p>{`在引入了`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`interface`}</code>{`之类的标记之后, 如果你坚持用 `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`TypeScript`}</code>{`, 那么 `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Angular`}</code>{` 可以从外表上最MVC的lib变成`}<strong parentName=\"p\">{`java`}</strong>{`.`}</p>\n    <p>{`早年 js 的设计不过是早产, 但依然是往前推进, 而现在看起来像是走了前进的道路, 不如说退步了.`}</p>\n    <p>{`我的编程的生涯告诉我, 所谓技术到底由什么带领?\n-- 是由各路 `}<strong parentName=\"p\">{`Lead`}</strong>{` 的喜好.`}</p>\n    <p>{`本来就是技术散文, 如果硬要结论的话`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"style\": {\n          \"counterReset\": \"linenumber NaN\"\n        },\n        \"className\": \"language-text line-numbers\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{` *如果非要做技术投资的话, 我觉着 ES6 可以保本.*`}</code><span parentName=\"pre\" {...{\n          \"aria-hidden\": \"true\",\n          \"className\": \"line-numbers-rows\",\n          \"style\": {\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0\"\n          }\n        }}><span parentName=\"span\"></span></span></pre></div>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}