{"version":3,"sources":["webpack:///./src/components/header.jsx","webpack:///./src/components/layout.jsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/taggroup-layout.jsx"],"names":["NavLink","to","children","className","id","setHtmlAttributes","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json","Tags","pageContext","data","tag","allMdx","edges","totalCount","tagHeader","map","node","slug","fields","title","frontmatter","excerpt","pageQuery"],"mappings":"iIAGMA,EAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,SAAN,OACd,kBAAC,IAAD,CAAMC,UAAU,6EAA6EF,GAAIA,GAC9FC,IAIU,oBACb,4BAAQC,UAAU,+BAChB,yBAAKA,UAAU,oBACb,kBAAC,EAAD,CAASF,GAAG,KAAZ,QACA,kBAAC,EAAD,CAASA,GAAG,SAAZ,QACA,kBAAC,EAAD,CAASA,GAAG,UAAZ,SACA,kBAAC,EAAD,CAASA,GAAG,UAAZ,Y,UCXS,oBAAGC,EAAH,EAAGA,SAA6BE,GAAhC,EAAaC,kBAAb,EAAgCD,IAAhC,OACb,yBAAKD,UAAU,0DACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,0BACb,0BAAMC,GAAIA,EAAID,UAAU,2BACrBD,O,kCCTT,sGAcyBI,QAAOC,QAELC,IAAMC,cAAc,K,qBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,geCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGET,IAAMU,cAAcC,I,+VAApB,EACLH,WACAC,iBACGA,EAAcG,OALV,O,kCCPX,kGA6BeC,UAzBF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,OAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,kBAAC,IAAD,CAAQpB,GAAG,OACT,4BAAKwB,GACL,6BACCF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAE,EAAUH,EAAKI,YAAfD,MACAE,EAAYL,EAAZK,QACR,OACE,oCACE,kBAAC,IAAD,CAAMlC,GAAI8B,GAAM,4BAAKE,IACrB,2BAAIE,SAST,IAAMC,EAAS","file":"component---src-components-taggroup-layout-jsx-9bdc7b6f9ae49a45ffe2.js","sourcesContent":["import React from \"react\";\nimport {Link} from \"gatsby\";\n\nconst NavLink = ({to, children}) => (\n  <Link className=\"no-underline text-teal-dark uppercase tracking-wide font-bold text-xl mr-8\" to={to}>\n    {children}\n  </Link>\n);\n\nexport default () => (\n  <header className=\"main-container mx-auto my-5\">\n    <nav className=\"flex justify-end\">\n      <NavLink to=\"/\">Home</NavLink>\n      <NavLink to=\"/tags\">Tags</NavLink>\n      <NavLink to=\"/posts\">Blogs</NavLink>\n      <NavLink to=\"/about\">About</NavLink>\n    </nav>\n  </header>\n)\n","import React from \"react\";\nimport Header from \"./header\";\nimport \"../css/global.css\";\n\nexport default ({ children, setHtmlAttributes, id }) => (\n  <div className=\"antialiased leading-tight min-h-screen w-full bg-white\">\n    <Header/>\n    <div className=\"main-container mx-auto\">\n      <main id={id} className=\"mt-4 md:mt-0 mx-2 mb-24\">\n        {children}\n      </main>\n    </div>\n  </div>\n);\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport Layout from \"./layout\";\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMdx;\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`;\n\n  return (\n    <Layout id=\"mdx\">\n      <h1>{tagHeader}</h1>\n      <hr/>\n      {edges.map(({ node }) => {\n        const { slug } = node.fields;\n        const { title } = node.frontmatter;\n        const { excerpt } = node;\n        return (\n          <>\n            <Link to={slug}><h2>{title}</h2></Link>\n            <p>{excerpt}</p>\n          </>);\n      })}\n    </Layout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\nquery ($tag: String) {\n  allMdx(sort: {fields: [frontmatter___date], order: DESC}, filter: {frontmatter: {tags: {in: [$tag]}}}) {\n    totalCount\n    edges {\n      node {\n        id\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n        }\n\n      }\n    }\n  }\n}\n`;\n"],"sourceRoot":""}